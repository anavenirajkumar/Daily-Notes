
Angular Notes
-----------------------------------------------------------------
1) Angular CLI - Angular framework is a component based framework
-----------------------------------------------------------------
       ng new <project_name>

        ng generate component <component_name>
        ng generate module <module_name>
        ng generate pipe <pipe_name>
        ng generate directive 

 - providers 
        - services that we need will be injected here 
    
 - Bootstrap 
        - what is the first component, the module should load 

 - exports   
        - is to export and expose the component outside of the module  

2) Components
--------------
* Component Communication "@Input, @Output, @ViewChild, @ViewChildren, ng-content, @ContentChild, @ContentChildren".
* it's a collection of a template in class some meta data.
* template(view) - User Interface

* ng g c <component-name>
--------------------------
  Every component has 4 files auto-generated with it 
    - component.html -> view or html or template file -> UI 
    - component.ts -> it will be a class file which will have methods -> Logic 
    - component.spec.ts -> It will have the unit test script for component 
    - component.scss -> stylesheet of the component 

 selector -> unique identifier for the component
        -> id of the component 
        -> using this selector we will use the component  
 templateUrl -> your HTML code 
        - component.html file 
 styleURLS -> for linking your component stylesheet 
        - component.scss 

 Create Modules
-----------------
* "CoreModule" for -> binding the data {{name}} & stuctural directives(*ngIf)
* name.modules.ts -> declarations: [components], imports : [CoreModule, DynamicModuleRouting], entryComponents : [dynamicComponents] -> for only Dynamic Components
* name.routing.modules.ts -> imports: [RouterModule.forChild(routes)], exports: [RouterModule]
* import in app.routing.module.ts -> const routes = [{ path: 'lifecycles', loadChildren: () => import('./lifecycles/lifecycle.module').then(m => m.LifecycleModule) }]

3) Input, Output Decorators
----------------------------
* Whenever you see a @ symbol - it's a decorator

input-component.html
--------------------
<h2>Input Component</h2>
<app-output-component [data]="childNames" (sendEvent)="calledChild($event)"></app-output-component>

input-component.ts
-------------------
 @ViewChild(OutputComponent) public child: OutputComponent;
  public childNames: string[] = [];
  ngOnInit(){
     this.childNames = this.child.getNames();
  }

  public calledChild(data:any) {
    console.log('Called Child Component', data);
    this.childNames = data; // re Assigning the data when child component clicked the event;
  }

output-component.html
----------------------

<h2>Output Component</h2>
<button type="button" class="btn-primary" (click)="callParent()">Call Parent Method</button>

output-component.ts
-------------------
  @Input() data: any;
  @Output() sendEvent = new EventEmitter();
  public names: any = ['one', 'two', 'three', 'four', 'five'];
  public changedNames: any = ['six', 'seven', 'eight', 'nine', 'ten'];

  public getNames() {
    return this.names;
  }
 public callParent() {
    this.sendEvent.emit(this.changedNames);
  }


4) Directives
----------------
 Structural Directives
        ngIf
        ngFor
        ngSwitch

        - ngIf -> done
        -> logical opeartors 
            OR (||)
            AND (&&)
            NOT (!)
    - ngIf else -> 
    - ngIf then else 

 * means its a built in Structrual directive 
    E.g ngIf 
    <div *ngIf="<condition>"> Value 1</div> 

Attribute Directives
---------------------
* Attribute Directives like Custom Derective Creation "Name","ngStyle","ngClass".

ngStyle
--------
    ex1:- <div [ngStyle]="{'background-color':'green', 'color':'#fff'}">  inline style
    ex2:- <div [ngStyle]="{'background-color': variableABC}"> this is dynamaic color -> public variableABC = "blue";
    ex3:- <div [ngStyle]="{'color': txtColor === 'blue' ? 'blue' : 'green'}">  ->  public txtColor = "blue";

ngClass
-------
 * we can pass strings, array values, objects

   ex1:- <div [ngClass]="'abc'">Single class</div> -> styles class .abc {backgrounf-color: blue;} 
   
   ex2:- <div [ngClass]="'abc efg'">Multiple classes</div> -> styles class  .abc {backgrounf-color: blue;}; .efg{backgrounf-color: green;} 

   ex3:- <div [ngClass]="dynamicVariable">Dynamic Class</div> -> public dynamicVariable = "abc";  

   ex4:- <div [ngClass]="conditionVariable === 'abc' ? 'abc' : 'efg'">condition Variable Class</div> -> public conditionVariable = "abc";  

   ex5:- <div [ngClass]="valid? 'green' ? 'red'">condition Variable Class</div> -> public valid:boolean = false;  

   ex6:- <div [ngClass]="{abc: true, efg : true}">Object Class</div>

   ex7 :- <h1 [ngClass]="{'green':  valid, 'red' : !valid}">Dynamic Color Change</h1> // green is 'ObjectKey' & CSS Class, and valid is 'Variable'  -> public valid:boolean = false;

   ex8:- <div [ngClass]="getClassName();">Method Class</div> -> public getClassName() { return 'abc'}

   ex9:-  <div [ngClass]="{'c' : name === 'styles'}">Show Color</div> // public name = 'styles';

Condition Based Css Class Change
--------------------------------
<button type="button"[ngClass]="selectedTab == 'Home' ? 'btn-primary' : 'btn-success'"> Approved </button>


4) Event Binding
------------------
     We can call any event 
    -> event is nothing but JavaScript events like 
        -> onclick
        -> onmouseover 
        -> onfocus
        -> onblur
        -> focusout
   Syntax is:-
    <button (click)="method()"></button>
            (mouseover)="methods1()"
            (mousemove)="mouseMove()"
            (focus)="methods2()"
            (blur)="methods3()"
            (focusout)="methods4()"
            (change)="changeFn1($event)"  -> change chesina tharvatha bind avuthundi. -> event.target.value
            (keyup)="changeFn2($event)"  -> after key enter binding the value -> event.target.value
            (ngModelChange)="modelChangeFn($event)" -> keep changing and binding atTime -> value  **

5) Property Binding 
---------------------
*  We write the property in square brackets [propterty_name]="..."

6) Pipes
-----------
Syntax is:-
    <div> {{ <input_data> | <name_of_pipe> }} </div>

    Built-In Pipes which are readily available for us to use 
    lowercase 
        -> saving usernames/email_address 
            -> lowercase 
    uppercase 
        -> currency 
        -> Airport Codes 
    date 
        -> by default Mon, dd, yyyy 
    json 
        -> I use this specially for debug purpose 
        -> showing <code> 
    currency
        -> by default uses dollar symbol $
    percent 
        -> by Default is rounding to near by integer 
        -> multiple by 100 and add % symbol 
    - date 
        'MMM-dd-yyyy'
        'short'
        'long'
    - percent 
        | percent : <minimumBeforeDecial>.<miniumDecialNumbers>-<maxDecimalNumbers>


7) Parameterized Routings OR Dynamic Routes
-----------------------------------------------
    http://localhost.com/user/10 -> get the user with Id as 10 
    http://localhost.com/search/ka/bangalore -> state and city 
    http://localhost.com/user/10/photos/34 -> user id = 10 and photo id = 34 

 
8) Template Reference Variables & Template Driven forms
-------------------------------------------------------
1) Template Reference Variables
--------------------------------
<input #referenceKey value="viewChild works!!" />
<button (click)="onClick()">change value</button>
  @ViewChild("referenceKey", { static: true }) input: ElementRef;
  ngAfterViewInit() {
    console.log(this.input.nativeElement.value); // -> viewChild works!!
  }
  onClick() {
    this.input.nativeElement.value = "test";
    console.log(this.input.nativeElement.value); // -> test
  }

<input type="button" #btn value="Enviar" (click)="dynamicClicking()">

 ngOnInit(){
  setTimeout(() => {
      this.btn.nativeElement.click();
    }, 10000); // after 10 seconds, this function calling
 }
 dynamicClicking() {
    console.log('Dynamic Clicking');
  }

2) Template Driven forms
------------------------
 * import FormsModule
 * ngForm -> form name as template variable using "#" ex: #loginForm="ngForm" (ngSubmit)="loginUser(loginForm)"
 * give in input field "ngModel"
 * loginForm(loginForm:NgForm) {
    console.log(loginForm);
  }
 * custom validations -> #email="ngForm"
  
9) Reactive Forms
--------------------
 * import ReactiveFormsModule
 * define "FormGroup" directive 
 * "formControlName" attrtibute
 * [formGroup]="loginForm" (ngSubmit)="postData()"
 * public loginForm : FormGroup | any;
 * import "FormsBuilder" in Constructor
 * public postData(){
   console.log(this.loginForm);
  }

 setValue vs patchValue
------------------------ 

<form [formGroup]="loginForm">
  <input placeholder="Name" type="name" formControlName="name" />
  <input placeholder="Email" type="email" formControlName="email" />
</form>

  ngOnInit(){
    // setValue
    this.loginForm.setValue({
      // name: 'Rajkumar',  -> name ni 'disable' chesi only email ki 'value' Set cheste "Error" chupistundi Endukante "setValue" ni use cheste Entire form fields is must *Mandatory
      email: 'rajkumar@gmail.com',
    });

    // patchValue
    this.loginForm.patchValue({
      // name: 'Rajkumar',    -> name ni 'disable' chesi only email ki 'value' Set Cheyachu and It's working proper. "patchValue" ni Specified fields ki matrame "Values" Set Cheyalanukunnappudu "patchValue" ni use chestam.
      email: 'rajkumar@gmail.com',
    });
 }

// reset form
this.loginForm.reset();

// valueChanges()  when subscribe to the observable
this.loginForm.get('email').valueChanges.subscribe(data => { // perticular field
 console.log(data); we are tracking every keyword the user entered
})

this.loginForm.valueChanges.subscribe(data => { // entire form fields tracking
 console.log(data); we are tracking every keyword the user entered
})

// statusChanges() => dynamically we can capture every field
this.loginForm.get('email').statusChanges.subscribe(data => { // perticular field
 console.log(data); we are tracking every keyword the user entered
})

// dynamically we can capture entire form fields
this.loginForm.statusChanges.subscribe(data => { // entire form fields tracking
 console.log(data); we are tracking every keyword the user entered
})


Form field valid Types
----------------------
valid -> true;
invalid -> false;
dirty -> true;
pristine -> false;
touched -> true;
untouched -> false;
pending -> false;

// FormArray 
 * Group of Multiple FormControls, FormGroups

9) Services, Http Params, InterCeptors
----------------------------------------

10) Angular Unit Testing 2 Types
---------------------------------
* All out test scripts are writen in "Jasmine" framework
* "Karma" ia a Test script Runner default port 9876

   -- 1) Unit Testing (jasmine, karma) // => independent modules, services, components, pipes.
         * we write our unit tests in jasmine framework
         * we run our unit tests using karma framework
   -- 2) End to End Testing (protractor) => // => when user is login from user profile, orders,...etc logout the application  -> protractor use for end to end testing
         * E2E we use Protractor framework

   ".spect.ts" -> spect.ts file we will use unit test script
   "e2e" -> e2e folder use for end to end test scripts
         - "e2e.spec.ts" all end 2 end scripts in side "e2e" folder

 
 "karma" config file -> /src/karma.config.js
 "protractor" config file -> /protractor.config.js

 How to Add codeCoverage Report in "angular.json under the "test" add "codeCoverage": true,
 
 Run Unit Test -> ng test
               -> ng test --codeCoverage -> without adding codeCoverage in "angular.json"

 Run Protractor -> ng e2e

Jasmine Framework Concepts
--------------------------

* describe -> Gobal function describe of jasmine it takes two parameters
    ex:-      describe("I want to Test Login Component", function(){  ---> describe
                 // write Specs logics 
                it("check login screen", func{ --------> specs
                     // expect ------------> expect
                    var tax = 10;
                    //expect("<actual>").toBe(10);
                    expect(tax).toBe(10); -> Asserting or Checking the value -> matcher
                 } 
                it("check login input elememts", func{
                 }
                it("check login button", func{
                 }
              }) 

* specs
* expect
* matcher -> what is expect the value;

1) import {async, ComponentFixture, TestBed} from '@angular/core/testing'; // 1 Step is Importing Classes and Interfaces
2) import { wishMe } from "./str.operations";  // 2nd Step is Importing Components
3) Write "describe" statements
4) "Fixture" we can get properties of component class and template
5) beforeEach - method -> setting up components, setting up data, importing services  etc...
6) TestBed -> main utility to define our module, components, etc...

------- AAA Pattern in Angular -----------
-> Arrange -> Act -> Assert
* Arrange -> "arrange" everything like setup ground work for working with tests for execution
    ex:- Create a Object pf Component etc
* Act -> "act" on your unit test case, calling methods, procesing data etc.
* Assert -> Verify the actual data of test result and expected data.

------ Angular TestBed (ATB) ----------
* testbed will create a testing module which is required to produce the module envireonment for testing.


11) AOT Compilation (A Head of Time Compilation ) ng build --prod
------------------------------------------------------------------
* Pre Compiled Code only Rendering in Browser.
* AOT Compilation, Bundlings in whenever user build Production level that time is Total Bundling. ex:- we canno't see the source code and debugging
* angular runs typescript, components but brower don't know typescript "AOT" is Converted typescript into Javascript or es6  That is of "AOT"
 - faster rendering, 
 - asynchronous requests, 
 - detect remplate errors, 
 - better security

12) JIT (Just in Time) ng build
--------------------------------
 * JIT Compilation "Bundling and Rendering runs in Browser" and we can view the source code and debug the app.
 * JIT Runs default until Angular 8 Version
 * JIT was like you compile the code when it is asked directly in the browser at runtime.

development environment vs production environment
-------------------------------------------------
* in "development environment" our app will be diploy to the server. and we can test the app and Bugs.
* in "prosuction environment" we can diploy our app to the public server. 


13) Ng Content  Projection
---------------------------
* we do content projection using <ng-content>
* "ng content projection"is nothing but you can send the content to another component or it can be any component or any module. class level => select=".classname", attribute level => select ="[abcd]"
* "ng contnent" projection ante content nu transfer cheyadam like any component ki, leda any module ki
-----------------
parent component
------------------

<app-component-html>
  <app-ng-content-projection>
      <p role> This is a selected content for Roles </p>
      <p class="test"> This Content is from the App Component to app-ng-content-projection Component </p>
  </app-ng-content-projection>

   <app-ng-content-projection>
       <ng-template #adminTemplate>
          This is a Large Content thats why we are using template
       </ng-template>
   </app-ng-content-projection>
</app-component-html>

----------------
child component
----------------
<app-ng-content-projection-html>
  <ng-content select=".test"></ng-content>   output ->  <p> This Content is from the App Component to app-ng-content-projection Component </p>
  <ng-content select="[role]"></ng-content>  output ->  <p> This is a selected content for Roles </p>

    <div *ngIf="adminTemplate"> ------------------------------------------ *ngIf="adminTemplate"
      <template [ngTemplateOutlet]="adminTemplate"> </template> ---------- <template [ngTemplateOutlet]="adminTemplate"> </template>
   </div> 

</app-ng-content-projection-html>

--------------------
child component.ts
--------------------
 @ContentChild('adminTemplate') adminTemplate : TemplateRef<any>;

14) @ViewChild and @ContentChild
--------------------------------
@ViewChild
-----------
* We Can Access the properties and functions.
* return the first matching element
* "viewChild" is basically used to get Single element at a time using "ngAfterViewInit()" lifecycle.
* ViewChild decorator tho we can access child component properties, and we can set values based on certain conditions.
* viewchild is a most used decorator
* we can use @ViewChild to inject a reference to existing component or DOM Element.
* viewchild gets loaded after ngAfterViewInit() Method
* viewchild is a decorator used for manipulating/updating, get dom elements, we can set values based on certain conditions child component
* same like => let ref = document.getElementById('btn'); ref?.click();

@ContentChild
-----------------
* parent nundi child ku html content "ng-content" dwara transfer chesinappudu vachina html dom single "element" ni access chesukovadaaniki "@Content" use chestam.
* "@ContentChild"  accessing ""ngAfterContentInit()" lifecycle 

example:-
  app-component.html
---------------------
    <app-child>
       <h3 #temp>Rajkumar</h3>
    </app-child>      

app-child-component.html
-------------------------
 <ng-content></ng-content>

app-child-component.ts
-------------------------
@ContentChild('temp') temp:ElementRef;

ngAfterContentInit(){
  console.log(this.temp);
this.temp.nativeElement.setAttribute('style', 'color:red');
}



15) @ViewChildren and @ContentChildren 
-------------------------------------
@ViewChildren
---------------
* return all the matching elements like QueryList.
* "ViewChildren" always returns all the elements as a QueryList by using "ngAfterViewInit()" lifecycle.

@ContentChildren 
----------------
* parent nundi child ku html content "ng-content" dwara transfer chesinappudu vachina html dom QueryList "elements" ni access chesukovadaaniki "@ContentChildren" use chestam.
* "@ContentChildren" accesing "ngAfterContentInit()" lifecycle

example:-
  app-component.html
---------------------
    <app-child>
       <h3 #temp>Rajkumar</h3>
       <p #temp>Anaveni</p>
    </app-child>      

app-child-component.html
-------------------------
 <ng-content></ng-content>

app-child-component.ts
-------------------------
@ContentChildren('temp') temp:ElementRef;

ngAfterContentInit(){
  console.log(this.temp);
  this.temp.nativeElement.setAttribute('style', 'color:red');
}

16) ng-temlate
---------------
* ng-template doe's not occupy the content space in DOM. and it can be accessing only "structrural directives".
* ng-template, ng-container is accessing only custom directives, structural directives.
* "ng-template" dwara oka place lo different, different Components, different, different html Designs ni Chupinchavachu.
* ex:- oka dropdown "event" batti oka place lo different, different html design pages ni chupinchadam. like navbar, logos, html pages,etc...

17) HostBinding and HostListener
---------------------------------
* HostBinding ante dynamic ga css colors apply cheyam.
* HostListener ante button 'click' chesinappudu gani leda 'hover' chesinappudu gani dynamic button colors change cheyadam.

18) Async Pipe
---------------
* Convert Object into String => {{ data | async}}

19) Service Worker
------------------
* Service worker mostly use for "Progressive Web Applications".
* it works only production and with "https".
* without internet connection in App still Data is "Shows" data is Stored Service Worker.

20) Rxjs (Reactive Programming for Javascript)
-----------------------------------------------
* "rxjs" provides multiple operators. like pipe, of, from, filter, first, subscribe, map
* "subscribe()" provide different functionalities 
     - like => next(), completed(), error()
     ex:- subscribe({ next(x) => console.log(x); })

21) View Encapsulation
------------------------
* every component has own style sheet
* in angular, component css styles are encapsulated into the component's view and don't affect the rest of the application.
* encapsulation : ViewEncapsulation.None -> oka component lo raasina styles veroka component lo apply avadam.
* encapsulation : ViewEncapsulation.Emulated -> same component lo raasina styles ade component ki apply avadam.
* encapsulation : ViewEncapsulation.ShadowDom -> edi apply cheyadam valla third parties styles anevi remove avuthae. ante bootsrap button classes styles work avvavu.Only perticular component ku matrame third party styles work avvavu.
* A component H3 tag vundi B Component lo H3 tag nenu A Component ".css" file lo H3 Tag style Cheste adi Only A H3 tag ki matrame Apply Avuthundi. but B Component ki kuda Apply cheyalante "VewEncapsulation" use cheyali.
 ex:- A Component
      templateUrl : ['./users.component.html']
      styleUrls : ['./users.component.css'],
      encapsulation : ViewEncapsulation.None,  -> E Line Add cheste Mottam h3 anni vunna project lo mottaniki color apply avuthundi. 
* ViewEncapsulation.None -> oka component lo styles nu veroka component lo kuda use chesukovadaaniki "None" use chestam.
* ViewEncapsulation.Emulated -> same styles same class works.
* ViewEncapsulation.ShadowDom -> removing bootstrap class styles or thirdparty styles.

22) ViewContainerRef
---------------------
* Represents a container where one or more views can be attached to a component.
* Oka A Component lo every second ki "ng-template" dwara oka place lo different, different Components output Html Pages Chupinchavachu using "ViewContainerRef";
*   ఒక కాంపోనెంట్‌కు ఒకటి లేదా అంతకంటే ఎక్కువ వీక్షణలు జోడించబడే కంటైనర్‌ను సూచిస్తుంది.

23) Dynamic Component Allocation (with condition)
--------------------------------------------------
* Dynamic Component Allocation ante User Click Chesina Button Condition Batti Same Page lo Different, Different Components "ng-container" lo show cheyadam.

24) Change Detection Strategy
------------------------------
* Change Detection Strategy ante Adyna Oka Component lo amyna Changes, events click chesina ...etc Angular anedi Total Anni Components ni check chesukuntuvastundi.
* "ChangeDetectionStrategy.Default" -> ante Adyna Changes Inappudu Root Component nundi Anni Components varaku Check chestundi. -> lot of Time Taking
*** "ChangeDetectionStrategy.OnPush" -> use Cheste Adyna Component lo Changes Inappudu Only a "Perticular" Component tini matrame Check Chestundi. 

ChangeDetectorRef Methods
--------------------------
* markForCheck() -> OnPush vadinappudu changes jariginappudu a changes ni check cheyadaniki use chestam
* detach() -> detach anedi parent, child component ki velladu a perticular component varake stop avuthundu
* detectChanges() -> by default amyna changes aumatic ga check chestundi.
* reattach() ->  -> amyna changes inappudu migatha anni components ki effect load paduthundi. ante keep tracking.
 
25) Angular LifeCycles
----------------------
* first "ngOnChanges()" method call Avuthundi. dinni appudu Use chestamante Vere "Component" nundi Amyna Input Values vachinappudu a Input Values Chnage Ina Prathisari amyna logics raayalante dinni use chestam. values changes inappudu Previous Change Value ni Thelusukovadaniki, alage New Value ni Thelusukovadaniki use chestam. Edi Every time Values change inappudu Prathisari Call Avuthundi.
* second "ngOnInit()" method call Avuthundi. -> Edi Okkasari matrame Call Avuthundi.

* third "ngDoCheck()" method call Avuthundi. dinni Appudu Use Chestamante Parent Component nundi Child Component ki adyna "Value" vachinappudu a Value ni "Check" chesukovadaaniki dinni use chestam -> Edi Prathisari Call Avuthundi value ni thelusukovadaniki.

* fourth "ngAfterContentInit()" method call Avuthundi. -> Edi Appudu Use chestamante "<ng-content>" tho html "text" ni "Child Component" transfer chesetappudu Page anedi Load avuthundi "Child Component" lo appudu adyna logics raayalanukunnappudu dinni use chestam, Content change ina prathisary Matrame Call Avuthundi ngAfterContentInit() method only.
   example:- 
        app-parent-compoent.html    
----------------------------------       
              <app-child-component> h1 <app-child-component>
              <app-child-component> h2 <app-child-component>
              <app-child-component> h3 <app-child-component>

        app-child-component.html
----------------------------------- 
             <ng-content></ng-content>  


* fifth "ngAfterContentChecked()" method call Avuthundi. -> Edi Appudu Use chestamante "<ng-content> <p>{{data}}</p> </ng-content> tho data ni "Child Component" ki transfer chesinappudu "DATA" Change Ina prathisary "Child Component" lo "ngAfterContentChecked()" method call avuthundi. 

   example:- 
        app-parent-component.html    
----------------------------------
              <button type="button"(click)="changeContent()">ChangeContent</button>
              <app-child-component>{{name}}<app-child-component> // first showing "Angular" after clicked function name changed to "Angular Developer" and ngAfterContentChecked call one more time 

        app-parent-component.ts 
----------------------------------
define a varible => public name = "Angular";
 
public changeContent(){
  this.name = "Angular Developer";
}
      
        app-child-component.html
----------------------------------- 
             <ng-content></ng-content> 


* sixth "ngAfterViewInit()" method call Avuthundi. -> Edi Angular "Html" Page Load Inappudu andulo adyna "id" tho html page ni access chesukovadaaniki use chestam, Edi Page Load Inappudu Okasari Matrame Call Avuthundi.
 *Example:- html page lo oka popup undi adi atomatic page lo inappudu chupinchali ante daanini oka "idName" echchi ngAfterViewInit() lo ->  let ref = document.getElementById('idName'); ref.click(); ani Logic Raasi Use chestam   
 * total html page load inakane "ngAfterViewInit()" call avuthundi.


* seventh "ngAfterViewChecked()" method call Avuthundi. -> Edi html page change ina like styles change ina, leda html elements delete ina, appudu adyna actions cheyalanukunnappudu dinni use chestam
* html view lo content change ina prathisari "ngAfterViewChecked()" method call Avuthundi.
 
example:- 
        app-parent-component.html    
----------------------------------
              <button type="button"(click)="changeContent()">ChangeContent</button>
               <h2>{{name}}</h2>

        app-parent-component.ts 
----------------------------------
public name = "Angular"; // define a varible  
public changeContent(){
  this.name = "Angular Developer";
}
   

* "ngOnDistroy()" ane method ni manaku avasaram leni components ni Remove cheyadaniki use chestam.
-----------------------------------------------------------------------------------------------------
 expoer class OnDestroyComponent OnInit, OnDestroy {     
   OnInit(){
       localStorage.setItem("component", "OnDestroyComponent");
   }

   OnDestroy(){
     localStorage.removeItem('component');
   }

   -> private productsDataUnsubribe:Subscription; // define a variable
      this.productsDataUnsubribe = this.productService.getProducts().subscribe((res) => this.products = res);  
      ngOnDestroy() { // implements interface
         this.productsDataUnsubribe.unsubscribe();
      }
}


26) Promises vs Observables
----------------------------
Promises
----------
* "Promises" are Async
* "Promises" provide a single value at a time. exucute immediately when we created. 
* "Promises" are not Cancellable, it does't provide any operators.
 example :- 
----------
   // Promises Emits Single Value
    const newsPromise = new Promise((resolve) => {
      resolve('Promise 1');
      resolve('Promise 2');
    });
    newsPromise.then((res) => {
      console.log(res); // Promise 1
    });

Observables
------------
* "Observable" is a class
* "Observables" provide multiple values over a period time.
* "Observables" provide multiple operators like forEach,filter,reduce,retry,retryWhen,delay...etc
  example 1 :- 
------------
   // Observables Emits Provide Multiple Values
    const news$ = new Observable((observer) => {
      observer.next('Obserables 1');
      observer.next('Obserables 2');
    });
    news$.subscribe((res) => {
      console.log(res); // Obserables 1, Obserables 2
    });

example 2:- (using -> next, error, complete)
------------
const obs = new Observable((nums) => {
  nums.next(100)
  nums.next("rxjs")
  nums.next("hello")
  nums.error("error occured")
  nums.complete("completed")
})

ngOnInit(){
 this.obs.subscribe(
  data => console.log(data),
  err => console.log(err),
  () => console.log("completed")
)}


example 3:- (using -> next, error, complete)
------------
public arr = [];
const obs = new Observable((nums) => {
  nums.next(100)
  nums.next(200)
  nums.next(3000)
  //nums.error("error occured")
  //nums.complete("completed")
})

ngOnInit(){
 this.obs.subscribe({
   next : (data:any) => this.arr.push(data),
   console.log(this.arr)
   error : (err) => console.log(err),
   completed : () => {
     for(let i in this.arr){
      this.arr[i] += 99;
      console.log(this.arr)
    }
   }
 })
}

27) Multicasting Observable
-----------------------------
ex:- Oka "Youtube" Channel undi andulo oka rendu videos subcribers 10 mandi unnaru. tharvatha a youtube channel ki 100  Subscribers vacharu. appudu youtube nundi oka "video release" inadi appudu a video "110 mandiki" velthundi. but "100 mandiki" "first video","second video" velladu. this is a "Multicasting Observables"
 *  alage values kuda e process lage panichestaE

28) Subject and BehaviourSubject
---------------------------------
* "Subject" is a class, we can send data and recieve data in any component.
* "Subject" ante "Subject" nu "Subcribe" cheste adi "present" value nunde vastundi. not start from "0"

example:
--------
* create "todoService" ---------------------
      -> public arr = ["task1","task2","task3"];
         public todoList = new Subject()

   public sendTodos(){
    this.todoList.next(this.arr)
   }

  public addTodo(user:any){
   this.arr.push(user);
   this.sendTodos()
 }

* create component for getting data ----------------------
  public todos:any = [];
  constructor(private ts:todoService){}    
  ngOnInit(){
    this.ts.todoList.subscribe((data) => {
    this.todos = data
   });
    this.ts.sendTodos()
  }

* create component for adding data into subscription------------------
 html:-
  <input type="text" [(ngModel)]="user">
  <button type="button" (click)="add(user)">Add</button>
 ts :-
  add(user:any){
    this.ts.addTodo(user)
  }

* "BehaviourSubject" ante is almost same like "Multicasting Observable" but Edi "Previous" Value ni Gurthupettukuntundi.
example:
--------
* create "todoService" ---------------------
   public s1= new Subject()
   public s2= new BehaviourSubject("behaviour subject")
   constructor(){
     this.s1.next("simple subject");
   }


* create component for getting data --------------------
  constructor(private ts:todoService){}    
  ngOnInit(){
    this.ts.s1.subscribe((data) => {
     console.log(data);
   });
    this.ts.s2.subscribe((data) => {
     console.log(data);
   });
  }


* "ReplaySubject" 
  -> public data = new ReplaySubject(2,3000); // defining length, expiry time of data;
    constructor(){  // Service Constructor
     this.data.next("One");
     this.data.next("Two");
   }
  *Note -> service nu subscribe chesina 3 Seconds tharvatha Data anedi expiry avuthundi.
* "AsyncSubject" ->
  -> public data = new AyncSubject();
    constructor(){  // Service Constructor
     this.data.next("One");
     this.data.next("Two");
     this.data.next("Three");
     this.data.complete(); // this method calls after initializing the values and latest values it can be storing; -> this logic it can be use in component level also and after subscribe the service method Data is coming;
   }
28) Angular Internationalization (i18n) (Multi Languages Translater)
--------------------------------------------------------------------
* install Process
* npm install @ngx-translate/core --save
* npm install @ngx-translate/http-loader --save

** find it "console" and "network tab" -> http://localhost:4200/assets/i18n/te-Telugu.json

simple example:- dropdown list lo english,hindi,telugu,spanish,germany,french elements Unnae. Select chesina Element "event" batti Content mottam a language loki transalte avuthundi. 

29) ngNonBindable
-----------------
* "ngNonBindable" ante Dynamic Element "value" ni Bind cheyadu.
* ex:- <p ngNonBindable> {{name}}</p>

30) show More Aritcle and Hide Article Content Length
-----------------------------------------------------
html
----
<p>
  {{ loremText | slice: 0:endText }}
</p>
<p style="color: red" (click)="showMoreText()">{{ showMore }}</p>

ts
--
  public loremText =
    'Angular Article! and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content. Lorem ipsum may be used as a placeholder before final copy is available.';

  public endText = 17;
  public showMore = 'showMore';
  public showMoreText() {
    if (this.endText == 17) {
      this.endText = this.loremText.length;
      this.showMore = 'Hide';
    } else if (this.loremText.length) {
      this.showMore = 'showMore';
      this.endText = 17;
    }
  }


31) Only Matching Data Two Arrays 
---------------------------------
  public names1: any = ['a', 'b', 'c', 'd'];
  public names2: any = ['a', 'b'];
  public allNames: any = []; // [ "a", "b" ]

  constructor() {
    this.names1.forEach((e) => this.nameFinder(e));
  }
  public async ngOnInit() {
    let names = await this.checkData();
    console.log(names); // ["a", "b"]
  }

  public nameFinder(name: any) {
    let all = this.names2.filter((e) => e === name);
    console.log(all); // [ [ "a" ], [ "b" ] ]
    all.forEach((e) => {
      this.allNames.push(e);
    });
  }

  public checkData() {
    return this.allNames;
  }


32) Adding Extra DATA with Api Responce
----------------------------------------

public brands:any = [];

 getBrands(){
    this.shopService.getBrands().subscribe((response:any) => {
      this.brands = [{id : 0, name : 'All'}, ...response] 
    }, error => {
      console.log(error);
    });
  }

33) FormBuilder Array & removeAt() & hidePassword
--------------------------------------------------

html code
---------
<form>
  <div class="form-group">
    <label for="exampleInputEmail1">Email </label>
    <input
      type="email"
      class="form-control"
      id="exampleInputEmail1"
      placeholder="Enter email"
    />
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password </label>
    <input
      [type]="showPassword ? 'text' : 'password'"
      class="form-control"
      id="exampleInputPassword1"
      placeholder="Password"
    />
  </div>
  <div class="form-check" *ngIf="!showPassword">
    <input
      type="checkbox"
      [checked]="showPassword"
      (change)="showpassword()"
      class="form-check-input"
    />showpassword
  </div>
  <div class="form-check" *ngIf="showPassword">
    <input
      type="checkbox"
      [checked]="showPassword"
      (change)="showpassword()"
      class="form-check-input"
    />hidepassword
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>
<br />
<h4>Select Courses</h4>
<ng-container *ngFor="let l of languages">
  <input type="checkbox" value="{{ l }}" (change)="selectLang($event)" />{{ l }}
</ng-container>

<h4>Selected Courses</h4>
<ng-container>{{ form.get('languages')?.value }}</ng-container>


typescript code
---------------
import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl } from '@angular/forms';
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
  // define variable
  public showPassword: boolean = false;
  public languages = ['Java', '.Net', 'Python', 'Angular', 'ReactJS', 'SQL'];
  public form;
  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      languages: this.fb.array([]),
    });
  }
  ngOnInit() {}

  // calling function
  showpassword() {
    this.showPassword = !this.showPassword;
  }

  // changeEvent
  selectLang(event: any) {
    // console.log(event.target.value);
    let lang = this.form.get('languages') as FormArray;
    if (event.target.checked) {
      lang.push(new FormControl(event.target.value));
    } else {
      let i = 0;
      lang.controls.forEach((ele: any) => {
        if (ele.value === event.target.value) {
          lang.removeAt(i);
          return;
        }
        i++;
      });
    }
  }
}



34) RXJS (Operators)
----------------------
of() -> of is a function that returns observable
of([1,2,3,4],7,8,9).subcribe((data => {console.log(data)}) -> printing the same array in console

from() -> it takes only iterable arguments like -> [1,2,3,4] or "abcdef"; 1,2,3,4 or a,b,c,d,e,f
from([1,2,3,4]).subcribe((data => {console.log(data)}) -> printing the array of each element

range() -> it takes numbers (start, count)
range(5).subscribe((data) => {cosole.log(data)})
range(1,10).subscribe((data) => {cosole.log(data)})

interval() -> set seconds to call each time
interval(1000).subscribe((data) => {cosole.log(data)})

map() -> when we use map() in "observable" we must* use "pipe" operator
let obs = of(1,2,3,4,5).pipe(
  map((data) => {
      return data*10
  })  
)

obs.subscribe((data) => {console.log(data)});

fromEvent()
------------
* each click responce lo vachina each object nu emits chestundi.

html :-
-----
  <button type="button" #btn>Click me</button>
  <input type="text" #search placeholder="Search Product">

ts files:-
----------
  @ViewChild('search') search:any;
  @ViewChild('btn') btn:any;

ngAfterViewInit(){

 fromEvent(this.search.nativeElement, 'keyup').subscribe((data) => {
  console.log(data); // based on the typed letters that matching letters data coming from Api Responce
 });

 fromEvent(this.btn.nativeElement, 'click').subscribe((data) => {
  console.log(data);
 });
}


debounceTime()
---------------
* mostly using for delaying the time when the user entering the each keyword dalaying for the api calls.
* reduce each letter api calls.


html:-
------
 <input type="text" #search placeholder="Search Product">

ts file:-
---------
@ViewChild('btn') btn:any;

ngAfterViewInit(){
 fromEvent(this.search.nativeElement, 'keyup').pipe(
 debounceTime(5000)
 ).subscribe((data) => {
   console.log(data.target.value);
 });
}


merge()
-------
* mostly used for different, different data coming from different, different Api's.
let obs1  = of(89,60,56, 78);
let obs2 = from(["c","s"]);

let obs3 = merge([this.obs1, this.obs2])

ngOnInit(){
  this.obs3.subscribe((data) => {
    console.log(data)
  })
}

take()
-------
let obs1 = interval(1000).pipe(
   take(5) // take is takes number argument and limit of the observable values capture
);

let obs2 = of(1,2,3,4,5,6,7,8,9).pipe(
   take(5) // take is takes number argument and limit of the observable values capture
);

ngOnInit(){
 this.obs1.subscribe((data) => {
  console.log(data);
 })
this.obs2.subscribe((data) => {
  console.log(data);
 })
}


pluck()
--------

* pluck() operator used for "perticular property" in the object format.
let arr = from([
  {
    "id" : 1,
    "name" : "Rajkumar",
    "address" : {
       "state" : "Telanagana",
       "city" : "Karimnagar"
      } 
  },
 {
    "id" : 2,
    "name" : "Sai",
    "address" : {
       "state" : "AndhraPradesh",
       "city" : "Nizambad"
      } 
  },
 {
    "id" : 3,
    "name" : "Shajahan",
    "address" : {
       "state" : "AndhraPradesh",
       "city" : "Guntoor"
      } 
  }
]
).pipe(
pluck('address', 'city'))
ngOnInit(){
  this.arr.subscribe((data) => {
    console.log(data); // we can emit single property key in the each object only
  })
}


skip()
-------
* skip is used for skip the observable data

let arr = from([
  {
    "id" : 1,
    "name" : "Rajkumar",
    "address" : {
       "state" : "Telanagana",
       "city" : "Karimnagar"
      } 
  },
 {
    "id" : 2,
    "name" : "Sai",
    "address" : {
       "state" : "AndhraPradesh",
       "city" : "Nizambad"
      } 
  },
 {
    "id" : 3,
    "name" : "Shajahan",
    "address" : {
       "state" : "AndhraPradesh",
       "city" : "Guntoor"
      } 
  }
]
).pipe(skip(2))

ngOnInit(){
  this.arr.subscribe((data) => {
    console.log(data); 
  })
}


distinctUntilChanged()
------------------------

* distinctUntilChanged is used for number of arguments only "serial wise" repeated in the observable we can subscribe specified values.

obs = of(9,9,7,7,6,5,4,3,9,7).pipe(
distinctUntilChanged()
)

ngOnInit(){
  this.obs.subscribe((data) => {
    console.log(data); 
  })
}


ajax()
-------
* ajax provides what Api is giving request, responce, headers etc...
let obs = ajax('https://jsonplaceholder.typicode.com/users')

ngOnInit(){
 this.obs.subcribe((data) => {
   console.log(data)
 })
}

retry()
--------
* retry() is used for when we subscribe any Api, that Api is comes error after we trying to retry subsription how much time calling the Api we provide number of arguments.

let obs = ajax('https://jsonplaceholder.typicode.com/users').pipe(
 retry(2) // if any error come this Api we trying to call 2 times
)

ngOnInit(){
 this.obs.subcribe((data) => {
   console.log(data)
 }, error => {
   console.log(error)
 })
}



---------------------------------------
35) Content Projection with ng-content
---------------------------------------

* position the content "<h1 role>Products One<h1>" & you can display wherevar

app-parent-component.html
-------------------------
<app-child-component [products1]="products1"> 
  <h1 role>Products One<h1>         // -> mention the key
</app-child-component>

<app-child-component [products2]="products2"> 
  <h1>Products Two<h1>
</app-child-component>

app-parent-component.ts
-----------------------
 public products1 = [..........etc];
 public products2 = [..........etc];


app-child-component.html
-------------------------
<ng-content select="[role]"> </ng-content> // -> display first of the key content
<div *ngFor="let prod1 of products1">
     {{prod1}}
</div>

<ng-content> </ng-content>
<div *ngFor="let prod2 of products2">
     {{prod1}}
</div>

app-child-component.ts
----------------------
 @Input products1:any;
 @Input products2:any;



--------------------
36) Elements
--------------------
* import in constructor(private ele : ElementRef)

app-component.html
------------------
<h2>Dynamic Element Text Creation</h2>

<button type="button" #btn (click)="clickMe()">Click Me</button>

app-component.ts
----------------
 @ViewChild('btn', { static: false }) btn: ElementRef; // elements using VieChild with #btn
  constructor(private ele:ElementRef) {} // using with constructor

  ngOnInit() {
    let p = document.createElement('p'); // create element 
    // this.btn.nativeElement.remove();  // delete element
    p.classList.add('test'); // create element class -> .test {color: green}
    let text = document.createTextNode('Dynamic Paragraph Creation'); // create element text
    p.appendChild(text); // append text to element
    document.body.appendChild(p); // append element text to body;
  }

  ngAfterViewInit() {
    this.btn.nativeElement.setAttribute('style', 'color:red');
    this.btn.nativeElement.click();
  }

  public clickMe() {
    console.log("click me function called");
  }


Example 2:-
------------
app-element-two.html
--------------------

<h2>Element Component Two</h2>
<div class="container">
</div>

<div class="query">
   <p>Query Selector</p>
  <button type="button" (click)="call()">Click Me</button>
</div>

app-element-two.ts
-------------------
 constructor(private el: ElementRef) {}
  ngOnInit() {
    // Example 1
    debugger;
    let div = document.getElementsByClassName('container'); // list of all classNames in the project
    let p1 = document.createElement('p'); // dynamically create <p> <p/> only tag 
    p1.innerHTML = "This is Paragraph 1"; // adding p tag "Content"
    let p2 = document.createElement('p');
    p2.innerHTML = 'This is Paragraph 2';
    div[2].appendChild(p1); // adding paragraph into this "div" only
    div[2].appendChild(p2);

    let p3 = document.createElement('p');
    p3.innerHTML = 'This is Paragraph 3';

  }
  ngAfterViewInit() {

    // querySelector
    let q = this.el.nativeElement.querySelector('.query'); // using (.className)
    q.children[0].remove(); // removing the child element tag
    let p = document.createElement('p'); // creating the new element
    p.innerHTML = 'New Element is Created'; // adding the tag content
    q.appendChild(p); // appending the p tag
    q.children[0].click(); // dynamic clicking the button after page loads
    q.children[0].setAttribute('style', 'color:red');
    console.log(q);

    // insertBefore(element, set where tag positon)
    let p2 = document.createElement('p'); // dynamically create <p> <p/> only tag 
    p2.innerHTML = "This is paragraph 2"; // adding p tag "Content"
    q.insertBefore(p2, p);
    
  }
  public call() {
    console.log("Call Method Called");
  }


------------------------
37) DynamicComponent
------------------------
* dynamic Condition "*ngComponentOutlet"

dynamic-component.html
-----------------------

<div class="container">
  <div class="dinamic">
    <button mat-raised-button color="primary" (click)="assignComponent('cow')"> Cow </button>
    <button mat-raised-button color="primary" (click)="assignComponent('cat')"> Cat </button>
    <button mat-raised-button color="primary" (click)="assignComponent('dog')"> Dog </button>
  </div>

    <div>
      <ng-container *ngComponentOutlet="dummyComponent"></ng-container>
    </div>
</div>

dynamic-component.ts
--------------------
 dummyComponent = DogComponent; // define and assing any component when the page component is loads

  constructor() {}
  ngOnInit() {

  }

  assignComponent(component:any) { // show condition based components, (or) other module components
    if (component === "cow") {
      this.dummyComponent = CowComponent; // import CowComponent
    } else if (component === "dog") {
        this.dummyComponent = DogComponent; // import DogComponent
      } 
    else this.dummyComponent = CatComponent; // import CatComponent
  }



------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Component Interaction (Accessing the child method, parent method, passing data from one component to another component Input(),Output()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

component-interaction.html (First Component)
---------------------------------------------

<h2>Component Interaction</h2>
<p *ngFor="let name of childNames" #aa>{{name}}</p>

<app-component-interaction-two [data]="childNames" (sendEvent)="calledChild($event)"></app-component-interaction-two>


component.interaction.ts
-------------------------
import { AfterViewChecked, AfterViewInit, Component, ContentChildren, ElementRef, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { ComponentInteractionTwo } from './component-interaction-two';

@Component({
  selector: 'app-component-interaction',
  templateUrl: './component-interaction.html',
  styles: ['']
})
export class ComponentInteraction implements OnInit, AfterViewInit, AfterViewChecked {

 
 // @ViewChild('child') public child: ComponentInteractionTwo;

  public childNames: string[] = [];
  @ViewChild(ComponentInteractionTwo) public child: ComponentInteractionTwo;
  @ViewChildren('aa') aa: QueryList<ElementRef>
  constructor() {}
  ngOnInit() {
    this.child.number = 10;
    this.childNames = this.child.getNames();
    console.log(this.childNames);
  }

  ngAfterViewInit() {
    console.log(this.aa);
    this.aa._results[0].nativeElement.setAttribute('style', 'color:red');
    this.aa._results[1].nativeElement.setAttribute('style', 'color:green');
    this.aa._results[2].nativeElement.setAttribute('style', 'color:yellow');
    this.aa._results[3].nativeElement.setAttribute('style', 'color:blue');
    this.aa._results[4].nativeElement.setAttribute('style', 'color:orange');
  }

  public calledChild(data:any) {
    console.log('Called Child Component', data);
    this.childNames = data;
  }

  ngAfterViewChecked() {
      console.log(this.aa);
      this.aa._results[0].nativeElement.setAttribute('style', 'color:red');
      this.aa._results[1].nativeElement.setAttribute('style', 'color:green');
      this.aa._results[2].nativeElement.setAttribute('style', 'color:yellow');
      this.aa._results[3].nativeElement.setAttribute('style', 'color:blue');
      this.aa._results[4].nativeElement.setAttribute('style', 'color:orange');
  }


}


component-interaction-two.html (2nd Component)
-----------------------------------------------

<h2>component-interaction-two</h2>
<button type="button" class="btn-primary" (click)="callParent()">Call Parent Method</button>


component-interaction.ts
-------------------------

import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-component-interaction-two',
  templateUrl: './component-interaction-two.html',
  styles: ['']
})
export class ComponentInteractionTwo implements OnInit {
  @Input() data: any;
  @Output() sendEvent = new EventEmitter();
  public number = 0;
  public names: any = ['one', 'two', 'three', 'four', 'five'];
  public changedNames: any = ['six', 'seven', 'eight', 'nine', 'ten'];
  constructor() { }

  ngOnInit() {
    console.log(this.data);
  }

  public getNames() {
    debugger;
    console.log(this.names);
    console.log(this.number);
    return this.names;
  }

  public callParent() {
    this.sendEvent.emit(this.changedNames);
  }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                           Elements (Creating dynamic html tags & content & set tag postion & remove html tags from DOM)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* import in "constructor(private el: ElementRef)"

example 1:-
-----------

elements-component.html
------------------------

<h2>Elements Component</h2>

<div>

</div>
<button type="button" #btn (click)="clickMe()">Click Me</button>

elements-component.ts
----------------------
import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';

@Component({
  selector: 'app-elements',
  templateUrl: './elements-component.html',
  styles: ['.{test : color: red};']
})
export class ElementsComponent implements OnInit, AfterViewInit {

 @ViewChild('btn', { static: false }) btn: ElementRef; // elements using #btn
  constructor() {}
  ngOnInit() {
    let p = document.createElement('p'); // create element
    // this.btn.nativeElement.remove();
    p.classList.add('test'); // create element class
    let text = document.createTextNode('Dynamic Paragraph Creation'); // create element text
    p.appendChild(text); // append text to element
    document.body.appendChild(p); // append element text to body;
   
  }

  ngAfterViewInit() {
    this.btn.nativeElement.setAttribute('style', 'color:red');
    this.btn.nativeElement.click();
  }
  public clickMe() {
    console.log("click me function called");
  }
}


example 2
----------

elements-component-two.html
---------------------------

<h2>Element Component Two</h2>

<div class="container">

</div>

<div class="query">
   <p>Query Selector</p>
  <button type="button" (click)="call()">Click Me</button>
</div>


elements-component-two.ts
---------------------------

import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';

@Component({
  selector: 'app-elements-two',
  templateUrl: './elements-component-two.html',
  styles: ['.test{border: 2px solid red};']
})
export class ElementsComponentTwo implements OnInit, AfterViewInit {

  // @ViewChild('div', { static: false }) div: ElementRef;
  //@ViewChild('query', { static: false }) query: ElementRef;
  constructor(private el: ElementRef) {}
  ngOnInit() {
    // Example 1
    debugger;
    let div = document.getElementsByClassName('container'); // list of all classNames in the project
    let p1 = document.createElement('p'); // dynamically create <p> <p/> only tag 
    p1.innerHTML = "This is Paragraph 1"; // adding p tag "Content"
    let p2 = document.createElement('p');
    p2.innerHTML = 'This is Paragraph 2';
    div[2].appendChild(p1); // adding paragraph into this "div" only
    div[2].appendChild(p2);

    let p3 = document.createElement('p');
    p3.innerHTML = 'This is Paragraph 3';

  }
  ngAfterViewInit() {

    // querySelector
    let q = this.el.nativeElement.querySelector('.query'); // using (.className)
    q.children[0].remove(); // removing the child element tag
    let p = document.createElement('p'); // creating the new element
    p.innerHTML = 'New Element is Created'; // adding the tag content
    q.appendChild(p); // appending the p tag
    q.children[0].click(); // dynamic clicking the button after page loads
    q.children[0].setAttribute('style', 'color:red');
    console.log(q);

    // insertBefore(element, set where tag positon)
    let p2 = document.createElement('p'); // dynamically create <p> <p/> only tag 
    p2.innerHTML = "This is paragraph 2"; // adding p tag "Content"
    q.insertBefore(p2, p);
    
  }
  public call() {
    console.log("Call Method Called");
  }
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                      Dynamic Component Loader
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Angular 2,4  (Old)Version
-------------------------
* import all components in module.
* import components-tags(app-viewencapsulation,app-lifecycles, app-contentprojection)

example:-
---------
  declarations: [DynamicComponent, DynamicComponentOne, ViewEncapsulationComponent, ContentProjectionComponent, LifecycleComponent, ViewEncapsulationComponentOne, ViewEncapsulationTwoComponent, ContentProjectionOneComponent, LifecycleOneComponent, LifecycleTwoComponent], // all components in different, different modules
  imports: [DynamicRoutingModule, CommonModule],
  entryComponents: [DynamicComponentOne, LifecycleComponent, ViewEncapsulationComponent, ContentProjectionComponent] // (only tag-components)


html file
---------
<div class="container">
  <div class="row">
    <div class="col-md-6">
      <button type="button" class="btn-primary" (click)="loadComponent('lifecycles')">load Lifecycles</button>
      <button type="button" class="btn-primary" (click)="loadComponent('contentprojection')">load Content Projection</button>
      <button type="button" class="btn-primary" (click)="loadComponent('encapsulation')">load ViewEncapsulation</button>
    </div>
    <ng-template componentRef></ng-template>
  </div>
</div>

typescript
----------
  public count = 0;
  public componentRef:any;
  constructor(private resolver: ComponentFactoryResolver, private includeTemplate: ViewContainerRef) { // import
  }
  ngOnInit() {
    let componentFactory = this.resolver.resolveComponentFactory<DynamicComponentOne>(DynamicComponentOne);
    this.componentRef = this.includeTemplate.createComponent<DynamicComponentOne>(componentFactory);
    interval(1000).subscribe(count => {
      this.count = this.count + 1;
      this.showDynamicComponent();
    })
  }

  // showing DynamicComponent using by Button
  public loadComponent(component: any) {
    console.log(component);
    if (component == 'lifecycles') {
      this.componentRef = this.includeTemplate.clear();
      let lifecycles = this.resolver.resolveComponentFactory<LifecycleComponent>(LifecycleComponent);
      this.componentRef = this.includeTemplate.createComponent<LifecycleComponent>(lifecycles);
    } else if (component == 'contentprojection') {
      this.componentRef = this.includeTemplate.clear();
      let contentprojection = this.resolver.resolveComponentFactory<ContentProjectionComponent>(ContentProjectionComponent);
      this.componentRef = this.includeTemplate.createComponent<ContentProjectionComponent>(contentprojection);  
    } else if (component == 'viewencapsulation') {
      this.componentRef = this.includeTemplate.clear();
      let contentprojection = this.resolver.resolveComponentFactory<ContentProjectionComponent>(ContentProjectionComponent);
      this.componentRef = this.includeTemplate.createComponent<ContentProjectionComponent>(contentprojection);
    } else {
      this.componentRef = this.includeTemplate.clear();
      let home = this.resolver.resolveComponentFactory<DynamicComponentOne>(DynamicComponentOne);
      this.componentRef = this.includeTemplate.createComponent<DynamicComponentOne>(home);
    }
  }

  // Showing Dynamic Component using Every Second
  public showDynamicComponent() {
    if (this.count == 1) {
      this.componentRef = this.includeTemplate.clear();
      let lifecycles = this.resolver.resolveComponentFactory<LifecycleComponent>(LifecycleComponent);
      this.componentRef = this.includeTemplate.createComponent<LifecycleComponent>(lifecycles);
    } else if (this.count == 2) {
      this.componentRef = this.includeTemplate.clear();
      let contentprojection = this.resolver.resolveComponentFactory<ContentProjectionComponent>(ContentProjectionComponent);
      this.componentRef = this.includeTemplate.createComponent<ContentProjectionComponent>(contentprojection);
    } else if (this.count == 3) {
      this.componentRef = this.includeTemplate.clear();
      let viewEncapsulation = this.resolver.resolveComponentFactory<ViewEncapsulationComponent>(ViewEncapsulationComponent);
      this.componentRef = this.includeTemplate.createComponent<ViewEncapsulationComponent>(viewEncapsulation);
      this.count = 0;
    } else {
      this.componentRef = this.includeTemplate.clear();
      let home = this.resolver.resolveComponentFactory<DynamicComponentOne>(DynamicComponentOne);
      this.componentRef = this.includeTemplate.createComponent<DynamicComponentOne>(home);
    }
  }






Angular Latest Version Dynamic Component Loader
------------------------------------------------------


Example 1:-
-----------
dynamic-component.html
-----------------------
<h1>Dynamic Component</h1>
<div style="border : 2px solid red">

  <button type="button" class="btn btn-primary" (click)="dynamicComponent('dynamicComponent')">Dynamic Component</button>
  <button type="button" class="btn btn-primary" (click)="dynamicComponent('elementsComponent')">Elements Component</button>
  <button type="button" class="btn btn-primary" (click)="dynamicComponent('homeComponent')">Elements Component</button>
  <ng-container *ngComponentOutlet="testComponent"></ng-container>
</div>

dynamic-component.ts
---------------------
 testComponent = HomeComponent;
  constructor() { }
  ngOnInit() {

  }

  public dynamicComponent(component:any) {
    if (component === 'dynamicComponent') {
      this.testComponent = DynamicComponent;
    } else if (component === 'elementsComponent') {
      this.testComponent = ElementsComponent;
    } else if (component === 'homeComponent') {
      this.testComponent = HomeComponent;
    }
  }




Example 2:-
-----------

dynamic-component.html
-----------------------
<h2>Dynamic Component</h2>
<button type="button" (click)="createComponent('stylecomponent')">Style Component</button>
<button type="button" (click)="createComponent('home')">Home Component</button>
<ng-template component></ng-template>


dynamic-component.ts
---------------------
 public component:any = this.container.createComponent<AppComponent>(AppComponent);
  constructor(private container:ViewContainerRef){}
  ngOnInit(): void {
      
  }

  public createComponent(data:any){
    this.container.clear();
    if(data === 'stylecomponent'){
      this.component = this.container.createComponent<StylesComponent>(StylesComponent);
     } else{
        this.component = this.container.createComponent<AppComponent>(AppComponent);
     }
  }



Example 3:-
------------
dynamic-component.html
-----------------------

<h2>Dynamic Component</h2>
<button type="button" (click)="createComponent(0)">Style Component</button>
<button type="button" (click)="createComponent(1)">Home Component</button>

<ng-template component></ng-template>

dynamic-component.ts
---------------------
 public id = 0;
  public component:any = this.container.createComponent<AppComponent>(AppComponent);
  constructor(private container:ViewContainerRef){}
  ngOnInit(): void {
      this.createComponent(this.id);
      interval(3000).subscribe(() => {this.createComponent(this.id)})
  }

  public createComponent(data:any){
    this.container.clear();
    if(data === 0){
      this.component = this.container.createComponent<StylesComponent>(StylesComponent);
     } else{
        this.component = this.container.createComponent<AppComponent>(AppComponent);
     }
     this.id = this.id === 0 ? 1 : 0
  }

























