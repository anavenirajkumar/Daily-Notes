========================================================================================================================================================================
                                                                     JavaScript 
========================================================================================================================================================================

----------------------- Even Number & Hard Number Calculations "%"----------------------
let a = 1000;
let b = 20;

// ------- Bhagaharam --------
//      100) 1000 ( 10  => Even Number
//           1000
//         --------
//            0     ====> Even Number

if(a % 10 === 0){
    console.log("EVEN NUMBER"); 
}else {
    console.log("HARD NUMBER");
}
======= Output ========
EVENT NUMBER

-----------------------------------------------------------------------------------------

------------------------------ Percentage Calculations "/" ------------------------------
let name = "Anaveni Rajkumar 10 Result";
let telugu, hindi, english, maths, science, social;
telugu = 80;
hindi = 70;
english = 60;
maths = 60;
science = 60;
social = 80;
let total = telugu + hindi + english + maths + science + social;
console.log(name);
console.log("Total Marks : ", total);
let percentage = total / 6; // 6 => 6 subjects
console.log("Percentage : ", percentage);

=========== Output ==============
Anaveni Rajkumar 10 Result
Total Marks :  410
Percentage :  68.33333333333333

------------------------------------------------------------------------------------------

1) Closers (Scope Chain)
-------------------------
* Closers ante oka function lo define chesina variable's a function run chesina tharvatha, a function loni variable's bayata use chesukogaligithe daanine "Closers" antaru.
* "InnerFunction()" anedi "OuterFunction() Yokka "Variables's" ni gani "parameters" ni gani leda "function" ni Access cheyagaligithe daanine "Closers" antaru.

ex:- 
    // Global  Execution Context
    let x = 10;
 
    function foo(){
      // Execution Context "foo" 
      let y = 15;

      function() bar(){
       // Execution Context "bar"
         let z = 20;
         let result = x + y + z;
         return result;
       }
      return bar; // -> bar function defination mottam vastundi.
    }

console.log(foo());

let result = foo();
console.log(result.bar());


2) IIFE (Immedately Involked Function Expression) ()
-----------------------------------------------------
* IIFE ane Appudythe Manam Function ni declare chestamo appude Execution Avuthundi.
* "()" symbols before function and after function with arguments
ex:- 
      var sum = ( function add(num1, num2){
         var result = num1 + num2;
         return result;
      }) (6,5);
      console.log(sum);

3) Hoisting
-------------
* variables declare cheyakamundu print cheste (or) call cheste daanine "Hoisting" antaru.
* only "var" ane "datatype" ni use cheste access avuthundi but "Value" Anedi "undefined" ani vastundi.


4) Call Back Functions
----------------------
* call back function is a function that is passing as an argument to another function.
* "function lo function" pampi function call ina tharvatha "pampina function" ni call cheyadam.

function a(bfunction){ // b function is came
    console.log(bfunction); // we get b function defination => [Function: b]
    bfunction();
    console.log("a function");
}
function b(){
    console.log("b function");
}
a(b);

OutPut
---------
[Function: b]
b function
a function


Example 2
-----------
 function add(a,b){
   console.log(a+b);
 }
 
 function product(a, b){
   console.log(a*b);
 }

 function calculator(val1, val2, operation){
   operation(val1, val2)
 }

 calculator(4,5, product)
 calculator(4,5,add)

 OutPuts
-------
 20
 9

5) Callback Hell
-----------------
* oka function ni execute chesinappudu a function lo multiple functions unnappudu  a function structure anedi "peramid" shape laga maruthundi. "disadvantage" is code relability peruguthundi. then we are going to "Promises" Concept

5) defer keyword attribute
--------------------------
* "defer" keyword ni enduku use chestamante "server" nundi data thestunappudu "html" page ni wait cheyakunda on the spot user ki design "show" cheyadaaniki use chestam, endukante server nundi data thisukuravadaaniki time paduthundi kaabatti.
* "html" page complete ga load ina tharvatha "script" anedi execution avuthundi.

6) Recursions
--------------
* oka "function" lopala ade function ni call cheyadame "Recursion" and Function "Reausability"
* "Recursion" lo Termination is Mandatory -> like if, else

7) Ternary Operator
--------------------
ex:- condition ? true : false;
    
     let a = 9;
     let b = 8;
     let big = a > b ? a : b;
     console.log(big);

     let abc = "abcd";
     let a = abc === 'abcd' ? 'Add' : 'Remove';
     console.log(a); // Add

     var pluralForm = function (n) {
       return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : null;
     };
     console.log(pluralForm(2));


*Note if, else ni vaadithe code length peruguthundi. so anduke "ternary operators" ni use chestam.

8) Anonymus Function
----------------------
* function alaanti name evvakunda call cheste daanine "Anonymus Function".
ex:- 
     let sum = function(num1m, num2){
        let result = num1 + num2;
        return result;
     }
     console.log(sum(4,5)) 

* "function expression" ante oka function ni oka variable ki Assign cheyadaanne "Function Expression";

9) Arrow Functions
-------------------
* ex:1:-  let product = (a,b) => {
            let result = a + b;
            return result; 
          }
         let printResult = product(4,5)
         console.log(printResult);

* ex:2:-  let abc = (a,b) => a + b //-> return this function without "return" keyword
          let printAbc = abc(5,5)
          console.log(printAbc);
         

10) Scopes, Block Scopes

scope
-----   function abc() { // scope start
           let abc = 10;
           console.log(abc);                 
        } // scope end

block scope
-----------
* "var" ane datatype tho declare cheste it can access anywhere. but "let", "const" not supported.
          
 ex:-  {  var abcd = 100; }
       console.log(abcd) // 100;

11) Default Parameters
-----------------------
ex:-  function abc(a, b = 10){
            console.log(a+b);
      }
     abc(5)

12) Rest Parameters
---------------------
* "Rest Parameters" ante oka function argument lo "abc(1,2,3,4,5,6,7,8) este appudu function lo "...arr" declare cheste echina "arguments" anni "array" lo store avuthae.

ex:- function abc(a,b,...array){
        console.log(array); // [1,1]
       let result = a + b;
       for(let item in array){
          result = result + item;
       }
       console.log(result);
     }

    abc(1,1,1,1)

13) forEach()
--------------
* "Array" lo unna prathi "element" print cheyadaniki use chestam.
let names = ["a", "b", "c", "d"];

// example 1
names.forEach((ele, index, arr) => {
    console.log(ele);
})

//example 2
names.forEach(name) // calling function with each "element"
function name(a,b,c){
  console.log(a);
}

13) map()
----------
* "map()" function anedi "Original" array nu "Modified" chesi kotha array ni create chestundi. 

example:-
let names = [1,2,3,4,5];
// example 1
let modifiedNumbers = names.map((ele, index, arr) => {
    console.log(ele);
    return ele + 1; //  each element ni array lo store chestundi
})
 console.log("modifiedNumbers", modifiedNumbers); //modifiedNumbers [ 2, 3, 4, 5, 6 ]

//example 2  
let numbersModified = names.map(name) // calling function with each "element"
function name(a,b,c){
      return a + 2;
}
console.log("numbersModified", numbersModified) // numbersModified [ 3, 4, 5, 6, 7 ]

14) filter()
-------------
* "filter()" function anedi kotha "Array" ni create chestundi. alaage array unna elements ni condition batti filter cheyadam.

15) reduce()
-------------
* "reduce()" function anedi "initialValue" (or) "accumulator" thisukuntundi leda "default" array loni "first" element ni thisukuntundi.
ex:-

let numbers = [1,2,3,4,5];

// example 1
let modifiedNumbers = numbers.reduce((previousElement,currentElement, index, arr) => {
    return previousElement + currentElement;
})
 console.log("modifiedNumbers", modifiedNumbers);

//example 2
let numbersModified = numbers.reduce(name) // calling function with each "element"
function name(previousEle,currentEle,index,arr){
      return previousEle + currentEle;
}
console.log("numbersModified", numbersModified)


16) Optional Chaining "?"
-------------------------
* "Optional Chaining" appudu use chestamante "Object", or "Array Object" lo nested objects unte okavela "value" unte chupinchimani lekapothe chupinchakudadani.

ex:- let employee = {
                      name : "Rajkumar",
                        address : {
                           city : "Karimnagar"                        
                        }
                   } 
 console.log(employee.address?.city)  // => ?

17) Memorization 
------------------
* "Memorization" ante "Guthupettukovadam" and Time Saving.

ex:- 
   let previousResults = {}
     function sum(a){
        if(a in previousResults){
            console.log("Key & Value", previousResults)     // Key & Value { '1': 1 }
            console.log("previousResults[a]", previousResults[a]) // previousResults[a] 1
          return previousResults[a];
        } else {
           let res = 0;
           for(i=1; i<=a; i++){
            res+= i;
           }
          previousResults[a] = res;
          return res;
        }
     }
 
    console.time();
    console.log("started"); // started
    console.log("RESULT =>", sum(1)); // RESULT => 1
    console.timeEnd();  // default: 5.612ms => First Time Taking Time
    console.time(); 
    console.log("started"); // // started
    console.log("RESULT =>", sum(1)); // RESULT => 1
    console.timeEnd();  // default: 4.599ms  => Second Time Talking Time


18) DOM Objects
-----------------
* "document.getElementById("idName") -> id match ina "element" return chestundi "js".
* "document.getElementsByClassName("className") -> className match ina prathi "element" ni return chestundi.
* "document.getElementsByTagName("tagName") -> tagName match ina prathi "element" ni return chestundi.
* "document.querySelector(".className/#IdName/tagName") -> ".abc or #abc, <p>" tho match ina single first "element" ni return chestundi.
* "document.querySelectorAll(".className/#IdName/tagName") -> ".abc or #abc, <p>" tho match ina prathi "element" ni return chestundi.

19) Debouncing and Throttling
------------------------------
Debouncing
----------
* Debouncing ante "server" mida requests load padakunda website Performance Improve cheyadaniki use chestam.
example:- "Flipkart" search bar lo adyna "keyword" enter cheste every "keyword" server ku vellakunda konni seconds tharvatha user search chesina "keywords" batti okesari server ku request velthundi.

Throttling
-----------
* Throttling ante konni seconds tharvatha server ki requests pampadam.
example:- "Flipkart" website lo "scroll down" chesinappudu "konni" seconds tharvatha more products ni chupinchadam.


20) Generators
----------------
* star "*" sybmol tho function define cheste adi Generator function antaru.
* "yield" keyword anedi generation function ni "pause" cheyadaniki leda "start" cheyadaniki use chestam.
* it returns a Generator object.

 example:-   function* foo(index) {
                while (index < 2) {
                   yield index; 
                   index++;
               }
             }
           const iterator = foo(0);
           console.log(iterator.next()); // expected output: 0
           console.log(iterator.next().value);// expected output: 1
           


20) Math Objects
-----------------

sqrt()
------
console.log(sqrt(64)) // -> 8

min()
------
let array = [1,2,3,4,5];
console.log(Math.min(...array)) // -> 1

max()
------
let array = [1,2,3,4,5];
console.log(Math.max(...array)) // -> 5

round()
--------
console.log(Math.round(5.7)) // -> 5.7 anedi 6 number ku daggara undi

round()
--------
console.log(Math.round(5.7)) // -> 5.7 anedi 6 number ku daggara undi

ceil()
--------
console.log(Math.ceil(5.7)) // -> 5.7 anedi 5 kante pedda number ni estundi ante "6" ni estundi. 

floor()
--------
console.log(Math.floor(66.98)) // -> 66 number ne estundi ante same "value"

trunc()
-------
console.log(Math.trunc(75.98)) // -> 75 number ne estundi ante same "value"

rondom()
--------
console.log(Math.rondom()) // rondom ane method 0 - 1 lope ante -> 0.94873286714 ante 1 return cheyadu but "ONE" lopu rondom numbers ni generate chestundi.
console.log(Math.rondom() * 10) // -> 2.498374837847348
console.log(Math.floor(Math.rondom() * 10)) // -> generating rondom numbers only -> 1,2,3,4,5,6,7,8,9. applying floor method doe's not showing 0.99 decimal numbers



21) Window Open
----------------

Window.open()
--------------
Syntax : Window.open(URL, name/target, specifications); // names => _blank - open new tab, _self - samepage lo enko page ni open cheyadam, _parent, _top , specifications -> width, height, left, top, resizable, scrolling
 
example :- 

<button onclick="openNewWindow()"> </button>
<button onclick="moveWindow()"> </button>
<button onclick="resizeWindow()"> </button>
<button onclick="resizeByWindow()"> </button>

<script>

let ref;
  function openNewWindow(){
     window.open(); // example 1 open a new window
     window.open("","", "width=400px, height=500px,left=100px, top=200px"); // example 2 applying new window Open styles
     window.open("learning.html","", "width=400px, height=500px,left=100px, top=200px"); // example 3 Passing a Page and applying new window Open styles
     window.open("learning.html","_self", "width=400px, height=500px,left=100px, top=200px"); // example 4 Passing a Page and Self and applying new window Open styles
     window.open("https://www.google.co.in","_blank", "width=400px, height=500px,left=100px, top=200px"); // example 5 Passing a URL and _blank and applying new window Open styles
}

 function moveWindow(){
      ref = window.open("https://www.google.co.in","_blank", "width=400px, height=500px,left=100px, top=200px"); // example 5 Passing a URL and _blank and applying new window Open styles
      // ref.moveTo(800,100)  // window style pixels
      ref.moveBy(800,100)  // window style pixels
  }

 function resizeWindow()(){
      ref.resizeTo(200,100)  // window style pixels
  }


function resizeByWindow(){
      ref.resizeBy(800,400)  // window style pixels
  }

</script>


MoveWindow()
--------------

<button onclick="moveWindow()"> </button>

<script>
  function moveWindow(){
      let ref = window.open("https://www.google.co.in","_blank", "width=400px, height=500px,left=100px, top=200px"); // example 5 Passing a URL and _blank and applying new window Open styles
      // ref.moveTo(800,100)  // window style pixels
      ref.moveBy(800,100)  // window style pixels
  }
</script>

ResizeWindow()
--------------
<button onclick="resizeWindow()"> </button>

<script>
  function resizeWindow()(){
      ref.resizeTo(200,100)  // window style pixels
  }
</script>


22) Pure and Impure functions
------------------------------

Pure Function
--------------
* "Pure function" ante oka function anedi migatha functions ni and outside variables modified cheyakapothe appudu Daanini "Pure" Function ani anataru.
* "Predictable" ante oka function ki same arguments echi same output este Daanini "Predictable" antaru.

Impure function
----------------
* "Impure function" ante oka function ki arguments pampi a function lopala prathisaari amyna modified cheste Daanine "Impure function" antaru. and Aslo console.log("every time i'm calling im also Impure function")


23) Shallow Copy vs Deep Copy
------------------------------

Shallow Copy (if change both change)
------------------------------------
  let obj1 = {name : 'rajkumar', age : 24};
  let obj2 = obj1;
  obj2.name = "Anaveni Rajkumar"; // ekkada value change cheste rendu objects ki value assign avuthundi;
  console.log(obj1.name); // Anaveni Rajkumar
  console.log(obj2.name); // Anaveni Rajkumar

Deep Copy (Never Change)
------------------------
  let obj1 = {name : 'rajkumar', age : 24};
  let obj2 = Object.assign({}, obj1); or [...obj1]
  obj2.name = "Anaveni Rajkumar"; // ekkada value change cheste rendu objects ki value assign avuthundi;
  console.log(obj1.name); // rajkumar
  console.log(obj2.name); // Anaveni Rajkumar


24) Flatten Array
------------------
let arr = [1,2,3,4,5,6,7,8] // one dimential array

let arr2 = [1,2,[1,2,3,4],3,4,5,6,7,8] // two dimential array

let arr3 = [1,2,[1,2,3,[1,2,3,4,5]],3,4,5,6,7,8] // three dimential array

// Convert Two Dimential Array into Single Dimential Array
let result = arr2.flat(Infinity);
console.log(result);

// Convert Three Dimential Array into Single Dimential Array
let resultTwo = arr3.flat(Infinity);
console.log(resultTwo);


25) DotNotation. vs Square Bracket[]
-------------------------------------

let person = {
   firstName : 'Anaveni',
  'last Name' : 'Rajkumar',
   8328369027 : 'Mobile Number 8328369027',
};

console.log(person.firstName); // Anaveni -> using "Dot Notation"
console.log(person['last Name']); // Object Key anedi "string" lo vundi and "Spaces" vunte appudu Square Brackets ni Use Cheyali -> Rajkumar -> using "Square Backet"
console.log(person[8328369027]); // Object Key anedi Number lo Unnappudu Square Brackets ni Use Cheyali -> Mobile Number 8328369027 -> using "Square Backet"

26) DOM Traversal and DOM Manipulation
---------------------------------------
<!DOCTYPE html>
  <html>
     <head>
          <title>JavaScript</title>
     </head>
   <body>
       <div class="d1">
            <h1>This is heading 1</h1>
            <h2>This is heading 2</h2>
       </div>
       <div class="d2">
          <p>This is paragraph 0</p>
          <p class="p1"> This is paragraph 1
            <span>this is span 1</span>
            <span>this is span 2</span>
          <p>
          <p>This is paragraph 2</p>
       </div>
 
      <script>
          let p = document.querySelector('.p1');
          console.log(p); // <p class="p1"> This is paragraph 1<p>
          console.log(p.children[0],p.children[1]); // <span>this is span 1</span> <span>this is span 2</span> -> "children" is create Array of Elements
          console.log(p.childNodes); // Array of Elements
          console.log(p.nextElementSibling); // <p>This is paragraph 2</p>
          console.log(p.previousElementSibling); // <p>This is paragraph 0</p>
          console.log(p.parentElement); // <div class="d2"> <p class="p1"> This is paragraph 1<p> <p>This is paragraph 2</p> </div>
          console.log(p.parentElement.previousElementSinling); //  <div class="d1"> <h1>This is heading 1</h1> <h2>This is heading 2</h2> </div>
          console.log(p.parentElement.previousElementSinling.children[0]); //  <h1>This is heading 1</h1>
      </script>
   </body>
</html>


27) Create Dynamic 'html' elements and Remove 'html' elements Dynamically
-------------------------------------------------------------------------- 
<!DOCTYPE html>
  <html>
     <head>
          <title>JavaScript</title>
     </head>
   <body>
       <div>
           <p>This is paragraph 4</p> -> Dynamically Created "tag" and "Content" -> Example 2
           <p>This is paragraph 1</p>
           <p>This is paragraph 2</p>
           <p class="p5">This is paragraph 5</p>  -> Dynamically Deleting this "Tag and Content"
           <p>This is paragraph 3</p> -> Dynamically Created "tag" and "Content" -> Example 1
       </div>
 
      <script>
         // Example 1
         let div = document.querySelector('div');
         let p = document.createElement('p'); // dynamically create <p> <p/> only tag 
         p.innerHTML = "This is paragraph 3"; // adding p tag "Content"
         div.appendChild(p); // adding paragraph into this "div" only

         // Example 2 Adding tag and Content set Location path
         let p1 = document.querySelector('p');
         let p4 = document.createElement('p4'); // dynamically create <p> <p/> only tag 
         p4.innerHTML = "This is paragraph 4"; // adding p tag "Content"
         div.insertBefore(p1,p);  // "<p>This is paragraph 1</p>" e tag mundu Dynamic ga "<p>This is paragraph 4</p>" ane "Tag and Content" Create Avuthundi
        
         // Delete html "tag and Content" 
         let p5 = document.querySelector('.p5');
         p5.remove(); // or delete using div tag  -> div.removeChild(p5);

      </script>     
    </body>
</html>


28) Only Matching Data Two Arrays 
-----------------------------------
Example 1
---------
<script>
  debugger;
  let names1 = ['a', 'b', 'c', 'd'];
  let names2 = ['a', 'b'];
  let allNames = []; // [ "a", "b" ]

  names1.forEach((e) => nameFinder(e));
  
  function nameFinder(name) {
    let all = names2.filter((e) => e === name);
    all.forEach((e) => {
      allNames.push(e);
    });
  }
 console.log(allNames);
  </script>

Example 2
----------
 <script>
  debugger;
  let names1 = ['a', 'b', 'c', 'd'];
  let names2 = ['a', 'b'];
  let allNames = []; // [ "a", "b" ]

  names1.forEach((e) => nameFinder(e));

  function nameFinder(name) { 
    let abcd = names2.filter((e) => e === name);
     allNames.push(abcd);
  }
  var merged = [].concat.apply([], allNames);
  console.log(merged);

  </script>


29) this keyword (Represents an Object)
---------------------------------------

let name = "ABCD";
console.log(this);
comsole.log(this.name);

let person = {
  name : "Anaveni Rajkumar",
  age :24
}

function wish(msg1){
   console.log("Hello", this.name,msg1); // Hello Anaveni Rajkumar Good Morning  
   console.log("Hello",msg1); // Hello 12345 
}

wish.call(person, "Good Morning"); // call method
wish.apply(person,["12345"]); // apply method take array format
let a = wish.bind(person);
a("aaaaaaaaaa")


30) Object Keys
----------------

const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

for (const key of iterator) {
  console.log(key); // 0 , 1, 2
}

const arr = ['a','b','c']
const sparseKeys = Object.keys(arr);
  console.log(sparseKeys); // Array ["0", "1", "2"]

var object = { 70: 'x', 21: 'y', 35: 'z' };
var k = Object.keys(object);
  console.log(k); // Array ["21", "35", "70"]

const denseKeys = [...arr.keys()];
console.log(denseKeys);  // [0, 1, 2]


31) Array.from
----------------
let raj = (Array.from('Rajkumar'));
console.log(raj);// expected output: Array ["R", "a", "j", "k", "u", "m", "a", "r"]

console.log(Array.from([1, 2, 3], x => x + x));
// expected output: Array [2, 4, 6]

32) flat()
-----------
const arr1 = [0, 1, 2, [3, 4]];
console.log(arr1.flat()); // output: [0, 1, 2, 3, 4]
const arr2 = [0, 1, 2, [[[3, 4]]]];
console.log(arr2.flat(2)); // output: [0, 1, 2, [3, 4]]

32) flatMap()
--------------
const arr1 = [1, 2, [3], [4, 5], 6, []];
const flattened = arr1.flatMap(num => num);
console.log(flattened); // output: Array [1, 2, 3, 4, 5, 6]


33) Date Object
----------------
*Note -> Month start from 0 - 11 (Jan - December);
*Note -> Sunday start from 0 - 6 (Sunday - Saturday) // days

let date = new Date(); // today date
let todayDate = "Oct 1 2022";
console.log(new Date(todayDate)); // Oct 1 2022
let date2 = new Date(2022,9,1); // year, month, date
console.log(date2); // Oct 01 2022 GMT+0530 (India Standard Time)
let date3 = new Date(2022,9,1,9,1); // year, month, date, time, minutes & also senconds
console.log(date2); // Oct 01 2022 09:01:00 GMT+0530 (India Standard Time)

date.getDay();
date.getDate();
date.getMonth();
date.getYear();
date.getFullYear();
date.getTime();
date.getMinutes();
date.getMilliseconds();

date.setDate(date.getDate()+2); // adding increment days
console.log(date);
date.setFullYear(date.getFullYear()+1); // adding increment year
console.log(date);















